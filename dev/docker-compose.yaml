version: '3'

services:

#   kong-database:
#     image: postgres:9.6
#     container_name: kong-database
#     ports:
#       - 5432:5432
#     environment:
#       - POSTGRES_USER=kong
#       - POSTGRES_DB=kong
#       - POSTGRES_PASSWORD=kong
#     volumes:
#       - "db-data-kong-postgres:/var/lib/postgresql/data"

#   kong-migrations:
#     image: kong
#     environment:
#       - KONG_DATABASE=postgres
#       - KONG_PG_HOST=kong-database
#       - KONG_PG_PASSWORD=kong
#       - KONG_CASSANDRA_CONTACT_POINTS=kong-database
#     command: kong migrations bootstrap
#     restart: on-failure
#     depends_on:
#       - kong-database

#   kong:
#     image: kong
#     container_name: kong
#     environment:
#       - LC_CTYPE=en_US.UTF-8
#       - LC_ALL=en_US.UTF-8
#       - KONG_DATABASE=postgres
#       - KONG_PG_HOST=kong-database
#       - KONG_PG_USER=kong
#       - KONG_PG_PASSWORD=kong
#       - KONG_CASSANDRA_CONTACT_POINTS=kong-database
#       - KONG_PROXY_ACCESS_LOG=/dev/stdout
#       - KONG_ADMIN_ACCESS_LOG=/dev/stdout
#       - KONG_PROXY_ERROR_LOG=/dev/stderr
#       - KONG_ADMIN_ERROR_LOG=/devupdate/stderr
#       - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
#     restart: on-failure
#     ports:
#       - 8000:8000
#       - 8443:8443
#       - 8001:8001
#       - 8444:8444
#     links:
#       - kong-database:kong-database
#     depends_on:
#       - kong-migrations

#   konga:
#     image: pantsel/konga
#     ports:
#       - 1337:1337
#     links:
#       - kong:kong
#     container_name: konga
#     environment:
#       - NODE_ENV=production

  usercenter:
    image: golang:latest
    container_name: user-center
    # build: 
    #   context: ../
    #   dockerfile: ./services/users/Dockerfile
    working_dir: /app
    command:       
      - /bin/bash
      - -c
      - |
        echo 'start server...'
        go mod tidy
        go run  ./services/users/cmd/rest/users.go -f ./services/users/cmd/rest/etc/users.yaml
    volumes:
      - ../:/app
    ports:
      - "8080:8080"
    environment:
      - GO111MODULE=on
      - GOPROXY=https://goproxy.cn/,direct
    networks:
      - default    
  
  siteoldbackend1:
    build: 
      context: .
      dockerfile: Dockerfile
    command:       
      - /bin/bash
      - -c
      - |
        supervisord  -c celery.conf
        python manage.py makemigrations
        python manage.py migrate
        python manage.py runserver 0.0.0.0:8000
    # volumes:
    #   - /pythons/blogNew/werido-site-backend/:/var/www/html/weridoBlog/
    ports:
      - "8001:8001"
    depends_on:
      - sitedb
      - redis

  siteoldbackend2:
    build: 
      context: .
      dockerfile: Dockerfile
    command:       
      - /bin/bash
      - -c
      - |
        supervisord  -c celery.conf
        python manage.py makemigrations
        python manage.py migrate
        python manage.py runserver 0.0.0.0:8000
    # volumes:
    #   - /pythons/blogNew/werido-site-backend/:/var/www/html/weridoBlog/
    ports:
      - "8001:8001"
    depends_on:
      - sitedb
      - redis

  front:
    container_name: site-nginx
    image: nginx
    ports:
    - 80:80
    # - 443:443
    restart: unless-stopped
    volumes:
    # - /pythons/site-new/dist:/usr/share/nginx/html/
    - ./nginx/conf.d/:/etc/nginx/conf.d/ 
    - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
    - /usr/site/logs/nginx/:/var/log/nginx/
    - /etc/ssl/:/etc/ssl/
    depends_on: 
    # - django todo
      - usercenter
    networks:
      - default

networks:
  default:
    name: kong-net
    external: true